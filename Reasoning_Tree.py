
def reasoning_tree(facts):
    """
    Reasoning Tree that mimics the accountant step by step, based on the clear facts generated by ourselves.
    Returns a data object with the individual potentially useful information for tax filing.
    """
    reasoning = {}

    # Step 1: Gross Income
    gross_income = (
        facts['employment_income'] +
        facts['business_income'] +
        facts['capital_gains'] +
        facts['foreign_income']
    )
    reasoning['gross_income'] = gross_income

    # --- Step 2: Deductions ---
    deductions = facts['deductions'] + facts['medical_expenses']

    # Age-based extra deduction
    if facts['age'] == '>=65':
        deductions += 2000  # senior deduction / military deduction

    # Education expenses deduction example
    if 'education_expenses' in facts:
        deductions += facts['education_expenses'] * 0.5  # 50% deductible

    # Cap deductions at 50% of gross income for realism
    deductions = min(deductions, 0.5 * gross_income)
    reasoning['deductions_total'] = deductions

    # Step 3: Taxable Income
    taxable_income = max(gross_income - deductions, 0)
    reasoning['taxable_income'] = taxable_income

    # Step 4: Progressive Tax Brackets
    def apply_brackets(income, brackets):
        tax = 0
        remaining = income
        for limit, rate in brackets:
            if remaining > limit:
                tax += (remaining - limit) * rate
                remaining = limit
        return tax

    if facts['filing_status'] == 'single':
        brackets = [(100_000, 0.30), (50_000, 0.20), (0, 0.10)]
    elif facts['filing_status'] == 'married_joint':
        brackets = [(150_000, 0.28), (75_000, 0.18), (0, 0.08)]
    elif facts['filing_status'] == 'married_separate':
        brackets = [(90_000, 0.25), (45_000, 0.15), (0, 0.10)]
    else:  # business
        brackets = [(200_000, 0.35), (100_000, 0.25), (0, 0.15)]

    base_tax = apply_brackets(taxable_income, brackets)
    reasoning['base_tax'] = base_tax

    # Step 5: Church Tax
    church_tax_amount = 0
    if facts['church_tax'] == 'mandatory':
        church_tax_amount = 0.02 * base_tax
    reasoning['church_tax_amount'] = church_tax_amount

    # Step 6: Penalties
    penalty_amount = 0
    if facts['filed_on_time'] == 'false':
        penalty_amount += 500  # late filing
    if facts['penalties'] == 'fraud_investigation':
        penalty_amount += 5000
    elif facts['penalties'] == 'late_fee':
        penalty_amount += 1000
    reasoning['penalty_amount'] = penalty_amount

    # Step 7: Audit Surcharge
    audit_surcharge = 0
    if facts['audited'] == 'true':
        audit_surcharge = 0.05 * base_tax  # 5% surcharge
    reasoning['audit_surcharge'] = audit_surcharge

    # Step 8: Tax Credits (optional)
    tax_credits = 0
    if 'children' in facts:
        tax_credits += facts['children'] * 2000  # example child tax credit
    reasoning['tax_credits'] = tax_credits

    # Step 9: Final liability
    total_liability = base_tax + penalty_amount + church_tax_amount + audit_surcharge - tax_credits
    total_liability = max(total_liability, 0)  # can't be negative
    reasoning['total_liability'] = total_liability

    return reasoning

